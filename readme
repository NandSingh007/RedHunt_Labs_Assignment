## question 1.--> The code aims to find the first number in a list that doesn’t repeat. If all numbers repeat, it returns null.

1. **Make a "Frequency" Object**:

   - We create an object called `frequency` to keep track of how many times each number shows up in the list.

2. **Count How Many Times Each Number Appears**:

   - We loop through each number in the list.
   - For each number, if it's already in `frequency`, we add 1 to its count. If it's not in `frequency`, we start counting it from 1.
   - After this loop, `frequency` tells us how many times each number appears.

3. **Find the First Non-Repeating Number**:

   - We go through the list again.
   - For each number, we check its count in `frequency`.
   - If the count is 1, it means this number only showed up once, so we return it.

4. **Return null If All Numbers Repeat**:
   - If we go through the entire list and don’t find any number with a count of 1, we return `null` to indicate that all numbers repeated.

### Example:

For the list [4, 5, 1, 2, 0, 4]:

- The frequency object will look like this: { 4: 2, 5: 1, 1: 1, 2: 1, 0: 1 }
- The function returns `5` because it is the first number that appears only once.

For the list [1, 1, 4, 2, 3, 3]:

- The frequency object will look like this: { 1: 2, 4: 1, 2: 1, 3: 2 }
- The function returns `null` because all numbers either repeat or do not have a unique occurrence.

---

---

---

---

---

---

---

---

---

---

---

## question 2. --> The `isValidBrackets` function checks if a string containing brackets is valid. A valid string means that every opening bracket has a corresponding closing bracket, and they are closed in the correct order.

1. **Initialize a Stack**:

   - The function uses an array called `stack` to keep track of opening brackets. Think of a stack like a stack of plates; you can only add or remove the top plate.

2. **Create a Map of Brackets**:

   - We define an object `bracketMap` that pairs each type of opening bracket with its corresponding closing bracket:
     - `(` maps to `)`
     - `{` maps to `}`
     - `[` maps to `]`

3. **Loop Through Each Character**:

   - We go through each character in the string `s`.
   - If the character is an opening bracket (found in `bracketMap`), we push it onto the stack.
   - If the character is a closing bracket, we do the following:
     - We remove the top item from the stack (the last opening bracket we added).
     - We check if this top bracket matches the current closing bracket using `bracketMap`. If it doesn’t match, we return `false` immediately because the brackets are not valid.

4. **Final Check**:
   - After processing all characters, if the stack is empty (`stack.length === 0`), it means all opening brackets had matching closing brackets and were in the correct order, so we return `true`.
   - If the stack is not empty, it means there are unmatched opening brackets left, and we return `false`.

### Example:

- For the string `([{}])`:

  - The function pushes `(` and then `[` onto the stack, and later matches them with `]` and `)`. The stack ends up empty, so it returns `true`.

- For the string `(]`:

  - The function pushes `(` onto the stack and then encounters `]`, which does not match. The function returns `false`.

- For the string `({[]})`:
  - The function processes all brackets correctly and returns `true` as the stack ends up empty.
